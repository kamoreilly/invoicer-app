openapi: 3.0.3
info:
  title: Invoicer App API
  description: API for managing invoices, clients, and payments
  version: 1.0.0
  contact:
    name: Invoicer App Team
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server

paths:
  # Client Management
  /clients:
    get:
      summary: Get all clients for the authenticated user
      tags:
        - Clients
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new client
      tags:
        - Clients
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /clients/{id}:
    get:
      summary: Get a specific client
      tags:
        - Clients
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update a client
      tags:
        - Clients
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete a client
      tags:
        - Clients
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Client deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Invoice Management
  /invoices:
    get:
      summary: Get all invoices for the authenticated user
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [draft, sent, paid, overdue, cancelled]
        - name: clientId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new invoice
      tags:
        - Invoices
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRequest'
      responses:
        '201':
          description: Invoice created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /invoices/{id}:
    get:
      summary: Get a specific invoice
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceWithItems'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update an invoice
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoiceRequest'
      responses:
        '200':
          description: Invoice updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete an invoice
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Invoice deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /invoices/{id}/send:
    post:
      summary: Send an invoice to client
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invoice sent successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /invoices/{id}/pdf:
    get:
      summary: Generate PDF for an invoice
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: PDF generated successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Line Items Management
  /invoices/{invoiceId}/items:
    get:
      summary: Get all line items for an invoice
      tags:
        - Line Items
      security:
        - bearerAuth: []
      parameters:
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of line items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    post:
      summary: Add a line item to an invoice
      tags:
        - Line Items
      security:
        - bearerAuth: []
      parameters:
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLineItemRequest'
      responses:
        '201':
          description: Line item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Payment Management
  /invoices/{invoiceId}/payments:
    get:
      summary: Get all payments for an invoice
      tags:
        - Payments
      security:
        - bearerAuth: []
      parameters:
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    post:
      summary: Record a payment for an invoice
      tags:
        - Payments
      security:
        - bearerAuth: []
      parameters:
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
      responses:
        '201':
          description: Payment recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Recurring Invoices
  /recurring-invoices:
    get:
      summary: Get all recurring invoices for the authenticated user
      tags:
        - Recurring Invoices
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of recurring invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecurringInvoice'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new recurring invoice
      tags:
        - Recurring Invoices
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecurringInvoiceRequest'
      responses:
        '201':
          description: Recurring invoice created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringInvoice'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Analytics
  /analytics:
    get:
      summary: Get financial analytics for the authenticated user
      tags:
        - Analytics
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postalCode:
          type: string
        currency:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateClientRequest:
      type: object
      required:
        - name
        - email
        - currency
      properties:
        name:
          type: string
          minLength: 2
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postalCode:
          type: string
        currency:
          type: string
          default: USD

    UpdateClientRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postalCode:
          type: string
        currency:
          type: string

    Invoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
        invoiceNumber:
          type: string
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
        subtotal:
          type: number
          minimum: 0
        taxRate:
          type: number
          minimum: 0
        taxAmount:
          type: number
          minimum: 0
        total:
          type: number
          minimum: 0
        currency:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
        client:
          $ref: '#/components/schemas/Client'

    InvoiceWithItems:
      allOf:
        - $ref: '#/components/schemas/Invoice'
        - type: object
          properties:
            lineItems:
              type: array
              items:
                $ref: '#/components/schemas/LineItem'
            payments:
              type: array
              items:
                $ref: '#/components/schemas/Payment'

    CreateInvoiceRequest:
      type: object
      required:
        - clientId
        - issueDate
        - dueDate
        - currency
      properties:
        clientId:
          type: string
          format: uuid
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        currency:
          type: string
          default: USD
        notes:
          type: string

    UpdateInvoiceRequest:
      type: object
      properties:
        dueDate:
          type: string
          format: date
        notes:
          type: string

    LineItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
          minLength: 3
        quantity:
          type: number
          minimum: 0
        unitPrice:
          type: number
          minimum: 0
        amount:
          type: number
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateLineItemRequest:
      type: object
      required:
        - description
        - quantity
        - unitPrice
      properties:
        description:
          type: string
          minLength: 3
        quantity:
          type: number
          minimum: 0
        unitPrice:
          type: number
          minimum: 0

    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: number
          minimum: 0
        paymentDate:
          type: string
          format: date-time
        paymentMethod:
          type: string
          enum: [stripe, paypal, bank_transfer, cash, other]
        transactionId:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreatePaymentRequest:
      type: object
      required:
        - amount
        - paymentDate
        - paymentMethod
      properties:
        amount:
          type: number
          minimum: 0
        paymentDate:
          type: string
          format: date-time
        paymentMethod:
          type: string
          enum: [stripe, paypal, bank_transfer, cash, other]
        transactionId:
          type: string
        notes:
          type: string

    RecurringInvoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        frequency:
          type: string
          enum: [daily, weekly, monthly, quarterly, yearly]
        interval:
          type: number
          minimum: 1
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        nextRunDate:
          type: string
          format: date
        isActive:
          type: boolean
        subtotal:
          type: number
          minimum: 0
        taxRate:
          type: number
          minimum: 0
        currency:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        clientId:
          type: string
          format: uuid
        client:
          $ref: '#/components/schemas/Client'

    CreateRecurringInvoiceRequest:
      type: object
      required:
        - clientId
        - name
        - frequency
        - startDate
        - subtotal
        - currency
      properties:
        clientId:
          type: string
          format: uuid
        name:
          type: string
        frequency:
          type: string
          enum: [daily, weekly, monthly, quarterly, yearly]
        interval:
          type: number
          minimum: 1
          default: 1
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        subtotal:
          type: number
          minimum: 0
        taxRate:
          type: number
          minimum: 0
          default: 0
        currency:
          type: string
          default: USD
        notes:
          type: string

    Analytics:
      type: object
      properties:
        totalRevenue:
          type: number
        outstandingInvoices:
          type: number
        overdueInvoices:
          type: number
        averagePaymentTime:
          type: number
        topClients:
          type: array
          items:
            type: object
            properties:
              client:
                $ref: '#/components/schemas/Client'
              totalAmount:
                type: number
              invoiceCount:
                type: number
        monthlyRevenue:
          type: array
          items:
            type: object
            properties:
              month:
                type: string
              revenue:
                type: number

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string